
/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp___home_goosople_notouchscreen_driver_daemon_DriverServiceAdaptor_h__adaptor__H__
#define __sdbuscpp___home_goosople_notouchscreen_driver_daemon_DriverServiceAdaptor_h__adaptor__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace top {
namespace goosople {
namespace notouchscreen {

class DriverService_adaptor
{
public:
    static constexpr const char* INTERFACE_NAME = "top.goosople.notouchscreen.DriverService";

protected:
    DriverService_adaptor(sdbus::IObject& object)
        : m_object(object)
    {
    }

    DriverService_adaptor(const DriverService_adaptor&) = delete;
    DriverService_adaptor& operator=(const DriverService_adaptor&) = delete;
    DriverService_adaptor(DriverService_adaptor&&) = delete;
    DriverService_adaptor& operator=(DriverService_adaptor&&) = delete;

    ~DriverService_adaptor() = default;

    void registerAdaptor()
    {
        m_object.addVTable(sdbus::registerMethod("switchTouchscreen").withInputParamNames("device_id", "status").withOutputParamNames("result").implementedAs([this](const std::string& device_id, const bool& status){ return this->switchTouchscreen(device_id, status); })).forInterface(INTERFACE_NAME);
    }

private:
    virtual bool switchTouchscreen(const std::string& device_id, const bool& status) = 0;

private:
    sdbus::IObject& m_object;
};

}}} // namespaces

#endif
